version: "3.8"
services:
  apm-server:
    build:
      context: ${PWD}/elastic
      dockerfile: Dockerfile.apm-server
    depends_on:
      - elasticsearch
      - kibana
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    networks:
      - container-link
    command: bash -c '
      sh ./wait-for-elasticsearch.sh elasticsearch:${ELASTICSEARCH_PORT} &&
      sh ./wait-for-kibana.sh kibana:${KIBANA_PORT} &&
      apm-server -e
      -E apm-server.rum.enabled=true
      -E setup.kibana.host=kibana:${KIBANA_PORT}
      -E setup.template.settings.index.number_of_replicas=0
      -E apm-server.kibana.enabled=true
      -E apm-server.kibana.host=kibana:${KIBANA_PORT}
      -E output.elasticsearch.hosts=["elasticsearch:${ELASTICSEARCH_PORT}"]'
    healthcheck:
      interval: 30s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/
    labels:
      traefik.enable: "true"
      # traefik.host: apm-server
      traefik.docker.network: ${NETWORK_NAME}
      traefik.http.routers.apm-server.entrypoints: "web,websecure"
      traefik.http.services.apm-server.loadbalancer.server.port: ${APM_SERVER_PORT}

  kibana:
    build:
      context: ${PWD}/elastic
      dockerfile: Dockerfile.kibana
    depends_on:
      - elasticsearch
    environment: # kibana config cf. https://www.elastic.co/guide/en/kibana/current/settings.html
      SERVER_HOST: localhost
      SERVER_NAME: kibana.${DOMAIN_NAME}
      SERVER_PORT: ${KIBANA_PORT}
      ELASTICSEARCH_HOSTS: http://elasticsearch:${ELASTICSEARCH_PORT}
      LOGGING_JSON: "true"
    # ports:
    #   - ${KIBANA_PORT}:${KIBANA_PORT}
    networks:
      - container-link
    command: bash -c '
      sh ./wait-for-elasticsearch.sh elasticsearch:${ELASTICSEARCH_PORT} &&
      kibana'
    healthcheck:
      interval: 30s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:${KIBANA_PORT}/api/status
    # volumes:
    #   - ./elastic/kibana.yml:/usr/share/kibana/config/kibana.yml
    labels:
      traefik.enable: "true"
      # traefik.host: kibana
      traefik.docker.network: ${NETWORK_NAME}
      traefik.http.services.kibana.loadbalancer.server.port: ${KIBANA_PORT}

  elasticsearch:
    build:
      context: ${PWD}/elastic
      dockerfile: Dockerfile.elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.threshold_enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    # ports:
    #   - ${ELASTICSEARCH_PORT}:${ELASTICSEARCH_PORT}
    networks:
      - container-link
    healthcheck:
      interval: 30s
      retries: 10
      # statusがredだったら 1 を送出する（-vオプションで通常と逆の処理になっている）（一致したら0のはずだけど，1を送出している）
      # 0 のとき　healthy, 1のときunhealthy
      test: curl -s http://localhost:${ELASTICSEARCH_PORT}/_cluster/health | grep -vq '"status":"red"'
    labels:
      traefik.enable: "true"
      traefik.docker.network: ${NETWORK_NAME}
      traefik.http.services.elasticsearch.loadbalancer.server.port: ${ELASTICSEARCH_PORT}

  fastapi:
    build:
      context: ${PWD}/fastapi
      dockerfile: Dockerfile.fastapi
    depends_on:
      - apm-server
      - elasticsearch
      - mysql
    environment:
      APM_SERVER_URL: http://apm-server:${APM_SERVER_PORT}
      ELASTICSEARCH_URL: http://elasticsearch:${ELASTICSEARCH_PORT}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # This variable is mandatory and specifies the password that will be set for the MySQL root superuser account.
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_CONTAINER_HOST: ${MYSQL_CONTAINER_HOST}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_CHARACTER: ${MYSQL_CHARACTER}
    # ports:
    #   - ${FASTAPI_PORT}:${FASTAPI_PORT}
    networks:
      - container-link
    command: bash -c '
      sh ./wait-for-elasticsearch.sh elasticsearch:${ELASTICSEARCH_PORT} &&
      sh ./wait-for-apm-server.sh apm-server:${APM_SERVER_PORT} &&
      sh ./wait-for-mysql.sh ${MYSQL_CONTAINER_HOST} ${MYSQL_USER} ${MYSQL_PASSWORD} &&
      uvicorn main:app --host=0.0.0.0 --port=${FASTAPI_PORT} --root-path /fastapi'
    healthcheck:
      interval: 30s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:${FASTAPI_PORT}/
    labels:
      traefik.enable: "true"
      traefik.docker.network: ${NETWORK_NAME}
      traefik.http.routers.fastapi.entrypoints: "web,websecure"
      traefik.http.services.fastapi.loadbalancer.server.port: ${FASTAPI_PORT}
      # cf. https://bit.ly/2UVPL2V
      # traefik.http.middlewares.test-stripprefix.stripprefix.prefixes: "/api/v1"
      traefik.http.routers.fastapi.rule: PathPrefix(`/fastapi`)
      traefik.http.routers.fastapi.middlewares: fastapi-stripprefix
      traefik.http.middlewares.fastapi-stripprefix.stripprefix.prefixes: /fastapi

  mysql:
    build:
      context: ${PWD}/mysql
      dockerfile: Dockerfile.mysql
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # This variable is mandatory and specifies the password that will be set for the MySQL root superuser account.
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_CHARACTER: ${MYSQL_CHARACTER}
      TZ: "Asia/Tokyo"
    restart: always
    volumes:
      - mysqldb:/var/lib/mysql
    ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
    networks:
      - container-link
    # healthcheck:
    labels:
      traefik.enable: "true"
      traefik.docker.network: ${NETWORK_NAME}
      traefik.http.services.mysql.loadbalancer.server.port: ${MYSQL_PORT}

  # https://fastapi.tiangolo.com/advanced/behind-a-proxy/#testing-locally-with-traefik
  traefik:
    # build: # TODO: build from dockerfile for COPY routes.toml file
    # The official v2 Traefik docker image
    image: traefik:v2.2
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - "--log.level=DEBUG"
      # Enabling docker provider
      - "--api.insecure=true"
      - "--providers.docker=true"
      # Do not expose containers unless explicitly told so
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8780:8080"
    networks:
      - container-link
    volumes:
      # So that Traefik can listen to the Docker events
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ${PWD}/traefik/traefik.yml:/etc/traefik/traefik.yml

  app:
    build:
      context: ${PWD}/app
      dockerfile: Dockerfile.app
    depends_on:
      - fastapi
    # ports:
    #   - ${APP_PORT}:${APP_PORT}
    networks:
      - container-link
    command: yarn start
    environment:
      NUXT_HOST: 0.0.0.0
      NUXT_PORT: ${APP_PORT}
      API_URL: "http://traefik"
      API_URL_BROWSER: "http://${DOMAIN_NAME}"
    labels:
      traefik.enable: "true"
      traefik.docker.network: ${NETWORK_NAME}
      traefik.http.routers.app.entrypoints: web
      traefik.http.services.app.loadbalancer.server.port: ${APP_PORT}
      traefik.http.routers.app.rule: Host(`${DOMAIN_NAME}`)

volumes:
  esdata:
    driver: local
  mysqldb:
    driver: local
networks: # cf. https://qiita.com/satodoc/items/188a387f7439e4ec394f
  # docker-composeで勝手にデフォルトネットワークが生成される予防。（自動で全コンテナが所属するbridgeを指定）
  default:
    external:
      name: bridge
  # コンテナ間通信用のネットワークセグメント
  container-link:
    name: ${NETWORK_NAME}
    driver: bridge
